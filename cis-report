import pandas as pd
import matplotlib.pyplot as plt
from tkinter import Tk, filedialog, simpledialog, messagebox
from docx import Document
from docx.shared import Inches
import datetime
import os

def main():
    # Setup GUI
    root = Tk()
    root.withdraw()
    messagebox.showinfo("Sachet Tool", "Select the CSV file to generate the report")

    # Ask for CSV file
    csv_path = filedialog.askopenfilename(
        title="Select CSV File",
        filetypes=[("CSV Files", "*.csv")]
    )

    if not csv_path:
        messagebox.showerror("Error", "No file selected!")
        return

    # Read CSV
    try:
        df = pd.read_csv(csv_path)
    except Exception as e:
        messagebox.showerror("Error reading file", str(e))
        return

    if 'Title' not in df.columns or 'Result' not in df.columns:
        messagebox.showerror("Invalid CSV", "CSV must contain 'Title' and 'Result' columns")
        return

    # Ask for Agent Name
    agent_name = simpledialog.askstring("Agent Info", "Enter Agent (Client) Name:")
    if not agent_name:
        messagebox.showerror("Missing Info", "Agent name is required!")
        return

    # Create Word Document
    doc = Document()
    doc.add_heading("Sachet", level=0)
    doc.add_heading(f"Agent: {agent_name}", level=1)

    # Add Table
    table = doc.add_table(rows=1, cols=2)
    table.style = 'Table Grid'
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = 'Setting'
    hdr_cells[1].text = 'Result'

    for _, row in df.iterrows():
        row_cells = table.add_row().cells
        row_cells[0].text = str(row['Title'])
        row_cells[1].text = str(row['Result'])

    # Pie Chart
    result_counts = df['Result'].value_counts()
    plt.figure(figsize=(4, 4))
    plt.pie(result_counts, labels=result_counts.index, autopct='%1.1f%%', startangle=90)
    plt.title('Security Level Distribution')
    chart_file = "pie_chart.png"
    plt.savefig(chart_file)
    plt.close()

    doc.add_picture(chart_file, width=Inches(4.5))

    # Save Word Document
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    file_name = f"{agent_name}-{today}-configureassement-file.docx"
    doc.save(file_name)

    messagebox.showinfo("Success", f"Report saved as: {file_name}")

if __name__ == "__main__":
    main()
